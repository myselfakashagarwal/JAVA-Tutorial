

 ▄█▀▀▀█▄█   ███▀▀██▀▀███         ██           ▄▄█▀▀▀█▄█   ▀████▀ ▀███▀ 
▄██    ▀█   █▀   ██   ▀█        ▄██▄        ▄██▀     ▀█     ██   ▄█▀   
▀███▄            ██            ▄█▀██▄       ██▀       ▀     ██ ▄█▀     
  ▀█████▄        ██           ▄█  ▀██       ██              █████▄     
▄     ▀██        ██           ████████      ██▄             ██  ███    
██     ██        ██          █▀      ██     ▀██▄     ▄▀     ██   ▀██▄  
█▀█████▀       ▄████▄      ▄███▄   ▄████▄     ▀▀█████▀    ▄████▄   ███▄
                                                                       
                                                                       

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

Intro ~

Stack data structure is a simple example of stack is books lied on top on each other on the table. Stack is a last in first out data 
structure it can be implemented using both array and linked. At first we will be focusing on the array-one than we wil move to the link list Implementation
The stack have three main Function ~
push(); - add element to the stack
pop();  - delete element from the stack 
peek(); - get the top element of the stack 
overflow - this condition appears when we try to add element element to the stack even if the stack is full
underflow - this condition appears when we try to delete the element from the stack even if the stack is empty 

Example of Implementation of stack from scratch ~

import java.util.*;
class mystack
{
    int[] my_stack_arr;
    int top;
    mystack(int capacity)
    {
        my_stack_arr = new int[capacity];
        top =-1;
    }
    public void push(int data)
    {
        if(top==my_stack_arr.length-1)
        {
            System.out.println("OVERFLOW");
        }
        else
        {
            top++;
            my_stack_arr[top]=data;
        }
    }
    public void pop()
    {
        if(top==-1)
        {
           System.out.println("UNDERFLOW");    
        }
        else
        {
            top--;
        }
    }
    public void peek()
    {
        System.out.println("The top element of the stack is: "+my_stack_arr[top]);
    }
    public void display()
    {
        for(int i=0;i<=top;i++)
        {
            System.out.print(my_stack_arr[i]+" ");
        }
    }
    public class Main
    {
        public void main(String[] args)
        {
          Scanner in =new Scanner(System.in);
          System.out.println("input the capacity of the stack ");
          int capacity =in.nextInt();
          
          mystack ob =new mystack(capacity);
          
          System.out.println("input the data");
          int data =in.nextInt();
          ob.push(data);
          
          ob.peek();
          ob.display();
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////