

 ▄█▀▀▀█▄█   ███▀▀██▀▀███         ██           ▄▄█▀▀▀█▄█   ▀████▀ ▀███▀ 
▄██    ▀█   █▀   ██   ▀█        ▄██▄        ▄██▀     ▀█     ██   ▄█▀   
▀███▄            ██            ▄█▀██▄       ██▀       ▀     ██ ▄█▀     
  ▀█████▄        ██           ▄█  ▀██       ██              █████▄     
▄     ▀██        ██           ████████      ██▄             ██  ███    
██     ██        ██          █▀      ██     ▀██▄     ▄▀     ██   ▀██▄  
█▀█████▀       ▄████▄      ▄███▄   ▄████▄     ▀▀█████▀    ▄████▄   ███▄
                                                                       
                                                                       

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

Intro ~

Stack data structure is a simple example of stack is books lied on top on each other on the table. Stack is a last in first out data 
structure it can be implemented using both array and linked. At first we will be focusing on the array-one than we wil move to the link list Implementation
The stack have three main Function ~
push(); - add element to the stack
pop();  - delete element from the stack 
peek(); - get the top element of the stack 
overflow - this condition appears when we try to add element element to the stack even if the stack is full
underflow - this condition appears when we try to delete the element from the stack even if the stack is empty 

Example of Implementation of stack from scratch ~

import java.util.*;
class mystack
{
    int[] my_stack_arr;
    int top;
    mystack(int capacity)
    {
        my_stack_arr = new int[capacity];
        top =-1;
    }
    public void push(int data)
    {
        if(top==my_stack_arr.length-1)
        {
            System.out.println("OVERFLOW");
        }
        else
        {
            top++;
            my_stack_arr[top]=data;
        }
    }
    public void pop()
    {
        if(top==-1)
        {
           System.out.println("UNDERFLOW");    
        }
        else
        {
            top--;
        }
    }
    public void peek()
    {
        System.out.println("The top element of the stack is: "+my_stack_arr[top]);
    }
    public void display()
    {
        for(int i=0;i<=top;i++)
        {
            System.out.print(my_stack_arr[i]+" ");
        }
    }
    public class Main
    {
        public void main(String[] args)
        {
          Scanner in =new Scanner(System.in);
          System.out.println("input the capacity of the stack ");
          int capacity =in.nextInt();
          
          mystack ob =new mystack(capacity);
          
          System.out.println("input the data");
          int data =in.nextInt();
          ob.push(data);
          
          ob.peek();
          ob.display();
        }
    }
}

Explanation ~

The thing done here is like child's play what we are doing here is we are adding elements we are adding(pushing) the elements in the stack at the same 
time we are updating the top this top represent the top element of the stack and also top+1 represent the no of elements in the array 
The top element of element is initially initilized to -1 thus before pushing any element in the stack we have to increase its value.
We will push element till the top value is less than the length of the stack if the top value reaches to the length -1 it means the stack is full if we 
further add element to the array then there will be overflow similarly We will pop elements in the stack till the value of the top reaches less than 
zero if we further pop the element from the stack then there will be under flow we just simply decrease the value of top in case of that. peek is just 
represent element at the top aka last element

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////