                                    ▄▄                             
 ▄█▀▀▀█▄█     ██                    ██                             
▄██    ▀█     ██                                                   
▀███▄       ██████    ▀███▄███    ▀███     ▀████████▄      ▄█▀█████
  ▀█████▄     ██        ██▀ ▀▀      ██       ██    ██     ▄██  ██  
▄     ▀██     ██        ██          ██       ██    ██     ▀█████▀  
██     ██     ██        ██          ██       ██    ██     ██       
█▀█████▀      ▀████   ▄████▄      ▄████▄   ▄████  ████▄    ███████ 
                                                          █▀     ██
                                                          ██████▀ 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Intro ~

String - String is basicially a set of characters grouped together 
In other languages like C string is implemented a an array of characters but in Java it is implemented as an object, being an object it comes with lots
of advantages for example compare and conceate etc. It is EG to implement String as it belongs to java's class library. Every String you create is an 
object and any change on it will result in creation of another object of String class because in java string are immutable. For those cases you wanna 
modify the String and dosent wanna create a new instance java provides StringBuffer and StingBuilder both hold String modified after their creation.
Both of these classes are the part of java.lang package they cannnot be modified because they are declared final thus it is impossible to create a
subclass. However a variabele holding the reference of an string object can be changed anytime. For each string literal in your program java 
automaticially craetes a String object.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Implementation ~

In regular case it is very easy to implement a string in java program, it is used like as a datatype and it can be used any part wanted in the program.
just like a normal variabele it got a declaration and Implementation part. A String literal is created by putting characters inside doubble quotes.
String mystring;                                                 //declaration
mystring = " We are just the outcome of our surroundings ";      //inilitization

String class in java provide variety of constructors that can be used to initialize members of an string object. The below program teaches all the 
constructor present in java to create a String object.

Note ~ In the below program I have used local scope for all the constructors similarly I have called all the instructors in the main class in case 
of running this program first javac creates .class files of both the class and .class is used to obtain the task 
commands for thse are ~
command 1 ~ javac ./myclass.java && java ./Main 
commmad 2 - java -cp  Main

import java.util.*;
import java.nio.charset.Charset;
import java.io.UnsupportedEncodingException;
class myclass
{
    //String();
    //Create a String object using new keyword.
    {
        String myString =new String();
        myString = "WE ARE A PART OF MATRIX";
        System.out.println("The string created using String() constructor is ~ "+myString);
    }

    //String(byte[] byteArray);
    //Create a String object using a byte array aka content of the string is the character representation of the contents of the byte array.
    {
        byte[] byteArry = {65,66,67,68,69};
        String myString = new String(byteArry);
        System.out.println("The string created using String(byte byteArry) constructor is ~ "+myString);
    }

    //String(byte[] byteArray, Charset charset);
    //Create a String object using a byte array aka content of the string is the character representation of the contents of the byte array.
    ////Character set can be unicode ASCII UTF-8 ETC
    {
        byte[] byteArry = {65,66,67,68,69};
        String myString = new String(byteArry,Charset.forName("UTF-8"));
        System.out.println("The string created using String(byte byteArry,Charset) constructor is ~ "+myString);
    }

    //String(byte[] byteArray, String charset);
    //Create a String object using a byte array aka content of the string is the character representation of the contents of the byte array.
    ////Character set can be unicode ASCII UTF-8 ETC
    {
        byte[] byteArray = {65,66,67,68,69};

          try
          {
             String myString = new String(byteArray,"ASCII");
             System.out.println("The string created using String(byte byteArry,String Charset) constructor is ~ "+myString);
          }
          catch (UnsupportedEncodingException e)
          {
             e.printStackTrace();
          }

    }

    //String(byte[] byteArray,int offset,int length);
    //Create a String object using byte arry aka content of the string is the character representation of the contents of the byte array starting
    //from the desired index and size.
    //offset is the characters you wanna miss in taking part of creation of String object
    //length is simply no of characters in the string in this case no of character you want to create a String object starting after offset
    {
        byte[] byteArray = {65,66,67,68,69};
        int offset = 2;
        int length = 3;
        String myString = new String(byteArray,offset,length);
        System.out.println("The string created using String(byte byteArry,offset,length) constructor is ~ "+myString);
    }

    //String(byte[] byteArray, int offset, int length, Charset charset);
    //Craete a String object using a byte array aka content of the string is the character representation of the contents of the byte array starting
    //from the desired index and size.
    //But the character set is user defined
    //offset is the characters you wanna miss in taking part of creation of String object
    //length is simply no of characters in the string in this case no of character you want to create a String object starting after offset
    //Character set can be unicode ASCII UTF-8 ETC
    {
        byte[] byteArry = {65,66,67,68,69};
        int offset = 2;
        int length = 3;
        String myString = new String(byteArry,offset,length,Charset.forName("ASCII"));
        System.out.println("The string created using String(byte byteArry,offset,length,Charset) constructor is ~ "+myString);
    }

    //String(byte[] byteArray,int offset, int length, String charset);
    //Create a String object using a byte array aka content of the string is the character representation of the contents of the byte array.
    //offset is the characters you wanna miss in taking part of creation of String object
    //length is simply no of characters in the string in this case no of character you want to create a String object starting after offset
    //Character set can be unicode ASCII UTF-8 ETC
    {
        byte[] byteArray = {65,66,67,68,69};
        int offset = 2;
        int length = 3;
          try
          {
             String myString = new String(byteArray,offset,length,"ASCII");
             System.out.println("The string created using String(byte byteArry,offset,length,String Charset) constructor is ~ "+myString);
          }
          catch (UnsupportedEncodingException e)
          {
             e.printStackTrace();
          }

    }

    //String(String String-literal);
    //Create a String object using the String literal provided in the arguments of the constructor
    {
        String myString = new String("WE ARE A PART OF MATRIX");
        System.out.println("The string created using String(String String-literal) constructor is ~ "+myString);
    }

    //String(char[] characterArray)
    //Create a String object using the characterArray aka The String object is composed of the character present in the characterArray
    {
        char[] characterArray={'W','E',' ','A','R','E',' ','A',' ','P','A','R','T', ' ','M','A','T','R','I','X'};
        String myString = new String(characterArray);
        System.out.println("The string created using String(char characterArray) constructor is ~ "+myString);
    }

    //String(char[] value, int offset, int length)
    //Create a String object using character arry aka content of the string is the character representation of the contents of the character array 
    //starting from the desired index and size.
    //offset is the characters you wanna miss in taking part of creation of String object
    //length is simply no of characters in the string in this case no of character you want to create a String object starting after offset
    {
        char[] characterArray={'W','E',' ','A','R','E',' ','A',' ','P','A','R','T', ' ','M','A','T','R','I','X'};
        int offset = 14;
        int length = 6;
        String myString = new String(characterArray,offset,length);
        System.out.println("The string created using String(char characterArray,int offset,int length) constructor is ~ "+myString);
    }

    //String(int[] codePoints,  int offset,  int length)
    //Create a String object that contains the unicode points of the sub array
    //offset is the characters you wanna miss in taking part of creation of String object
    //length is simply no of characters in the string in this case no of character you want to create a String object starting after offset
    {
        int[] codePoints ={65,66,67,68,69};
        int offset = 2;
        int length = 3;
        String myString = new String(codePoints,offset,length);
        System.out.println("The string created using String(int codePoints,int offset,int length) constructor is ~ "+myString);
    }

    //String buffer and String builder are the predefined classes to create a String we will be discussing them in the later part


}
class Main
{
          public static void main(String[] args)
        {
            myclass ob =new myclass();
        }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


String manipulation ~

There are numbers of things we can do on out string with predefined functions of String class. 

import java.util.*;
import java.nio.charset.Charset;
import java.io.UnsupportedEncodingException;
class myclass
{

 //Method ~ charAt(int index)
 //Returns ~ char 
 //Usecase ~ Retrns character at provided index
 {
  String mystring = "WE ARE A PART OF MATRIX";
  int index = 4;
  char returnedCharacter = mystring.charAt(index);
  System.out.println(" ''WE ARE A PART OF MATRIX''.chatAt(" +index+ ") = " + returnedCharacter );
 }

 //codePointAt(int index)
 //Returns ~ integer
 //Usecase ~ Returns character's unicodepoint at provided index
 {
  String mystring = "WE ARE A PART OF MATRIX";
  int index = 4;
  int returnedInteger = mystring.codePointAt(index);
  System.out.println(" ''WE ARE A PART OF MATRIX''.codePointAt(" +index+ ") = " + returnedInteger );
 }

 //codePointBefore(int index)
 //Returns ~ integer
 //Usecase ~ Returns character's unicodepoint present before provided index
 {
  String mystring = "WE ARE A PART OF MATRIX";
  int index = 4;
  int returnedInteger = mystring.codePointBefore(index);
  System.out.println(" ''WE ARE A PART OF MATRIX''.codePointBefore(" +index+ ") = " + returnedInteger );
 }

 //compareTo(String anotherString)
 //Returns - integer value of two Strings that are compared lexicographicially
 //Usecase -  This method is highly useful in case you want to compare two strings on the basics of alphabetical order
 //Less than zero means the string being compared to is smaller more than zero means string being compared to is bigger
 ////in this method is case sensitive aka If two Strings have same content but different case the String with uppercase will be considered as samaller
{
 String mystring1 = "abcd";
 String mystring2 = "bbcd";
 if(mystring1.compareTo(mystring2) > 0 )
 {
  System.out.println( "''abcdb''.compareTo(''bbcd'') = 1");
 }
 else
 {
  System.out.println(" ''abcdb''.compareTo(''bbcd'') = -1");
 }
}

//concat(String anotherString)
//Returns ~ String
//Usecase ~ This method is used to join two Strings together one after another
{
 String mystring1 = "WE ARE A ";
 String mystring2 = "PART OF MATRIX";
 String returnedString = mystring1.concat(mystring2);
 System.out.println(" ''WE ARE A ''.concat(''PART OF MATRIX'') = "+returnedString);
}

}
class Main
{
 public static void main(String[] args)
 {
  myclass ob =new myclass();
 }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////