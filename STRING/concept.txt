                                    ▄▄                             
 ▄█▀▀▀█▄█     ██                    ██                             
▄██    ▀█     ██                                                   
▀███▄       ██████    ▀███▄███    ▀███     ▀████████▄      ▄█▀█████
  ▀█████▄     ██        ██▀ ▀▀      ██       ██    ██     ▄██  ██  
▄     ▀██     ██        ██          ██       ██    ██     ▀█████▀  
██     ██     ██        ██          ██       ██    ██     ██       
█▀█████▀      ▀████   ▄████▄      ▄████▄   ▄████  ████▄    ███████ 
                                                          █▀     ██
                                                          ██████▀ 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Intro ~

String - String is basicially a set of characters grouped together 
In other languages like C string is implemented a an array of characters but in Java it is implemented as an object, being an object it comes with lots
of advantages for example compare and conceate etc. It is EG to implement String as it belongs to java's class library. Every String you create is an 
object and any change on it will result in creation of another object of String class because in java string are immutable. For those cases you wanna 
modify the String and dosent wanna create a new instance java provides StringBuffer and StingBuilder both hold String modified after their creation.
Both of these classes are the part of java.lang package they cannnot be modified because they are declared final thus it is impossible to create a
subclass. However a variabele holding the reference of an string object can be changed anytime. For each string literal in your program java 
automaticially craetes a String object.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Implementation ~

In regular case it is very easy to implement a string in java program, it is used like as a datatype and it can be used any part wanted in the program.
just like a normal variabele it got a declaration and Implementation part. A String literal is created by putting characters inside doubble quotes.
String mystring;                                                 //declaration
mystring = " We are just the outcome of our surroundings ";      //inilitization

String class in java provide variety of constructors that can be used to initialize members of an string object. The below program teaches all the 
constructor present in java to create a String object.

Note ~ In the below program I have used local scope for all the constructors similarly I have called all the instructors in the main class in case 
of running this program first javac creates .class files of both the class and .class is used to obtain the task 
commands for thse are ~
command 1 ~ javac ./myclass.java && java ./Main 
commmad 2 - java -cp  Main

import java.util.*;
import java.nio.charset.Charset;
import java.io.UnsupportedEncodingException;
class myclass
{
    //String();
    //Create a String object using new keyword.
    {
        String myString =new String();
        myString = "WE ARE A PART OF MATRIX";
        System.out.println("The string created using String() constructor is ~ "+myString);
    }

    //String(byte[] byteArray);
    //Create a String object using a byte array aka content of the string is the character representation of the contents of the byte array.
    {
        byte[] byteArry = {65,66,67,68,69};
        String myString = new String(byteArry);
        System.out.println("The string created using String(byte byteArry) constructor is ~ "+myString);
    }

    //String(byte[] byteArray, Charset charset);
    //Create a String object using a byte array aka content of the string is the character representation of the contents of the byte array.
    ////Character set can be unicode ASCII UTF-8 ETC
    {
        byte[] byteArry = {65,66,67,68,69};
        String myString = new String(byteArry,Charset.forName("UTF-8"));
        System.out.println("The string created using String(byte byteArry,Charset) constructor is ~ "+myString);
    }

    //String(byte[] byteArray, String charset);
    //Create a String object using a byte array aka content of the string is the character representation of the contents of the byte array.
    ////Character set can be unicode ASCII UTF-8 ETC
    {
        byte[] byteArray = {65,66,67,68,69};

          try
          {
             String myString = new String(byteArray,"ASCII");
             System.out.println("The string created using String(byte byteArry,String Charset) constructor is ~ "+myString);
          }
          catch (UnsupportedEncodingException e)
          {
             e.printStackTrace();
          }

    }

    //String(byte[] byteArray,int offset,int length);
    //Create a String object using byte arry aka content of the string is the character representation of the contents of the byte array starting
    //from the desired index and size.
    //offset is the characters you wanna miss in taking part of creation of String object
    //length is simply no of characters in the string in this case no of character you want to create a String object starting after offset
    {
        byte[] byteArray = {65,66,67,68,69};
        int offset = 2;
        int length = 3;
        String myString = new String(byteArray,offset,length);
        System.out.println("The string created using String(byte byteArry,offset,length) constructor is ~ "+myString);
    }

    //String(byte[] byteArray, int offset, int length, Charset charset);
    //Craete a String object using a byte array aka content of the string is the character representation of the contents of the byte array starting
    //from the desired index and size.
    //But the character set is user defined
    //offset is the characters you wanna miss in taking part of creation of String object
    //length is simply no of characters in the string in this case no of character you want to create a String object starting after offset
    //Character set can be unicode ASCII UTF-8 ETC
    {
        byte[] byteArry = {65,66,67,68,69};
        int offset = 2;
        int length = 3;
        String myString = new String(byteArry,offset,length,Charset.forName("ASCII"));
        System.out.println("The string created using String(byte byteArry,offset,length,Charset) constructor is ~ "+myString);
    }

    //String(byte[] byteArray,int offset, int length, String charset);
    //Create a String object using a byte array aka content of the string is the character representation of the contents of the byte array.
    //offset is the characters you wanna miss in taking part of creation of String object
    //length is simply no of characters in the string in this case no of character you want to create a String object starting after offset
    //Character set can be unicode ASCII UTF-8 ETC
    {
        byte[] byteArray = {65,66,67,68,69};
        int offset = 2;
        int length = 3;
          try
          {
             String myString = new String(byteArray,offset,length,"ASCII");
             System.out.println("The string created using String(byte byteArry,offset,length,String Charset) constructor is ~ "+myString);
          }
          catch (UnsupportedEncodingException e)
          {
             e.printStackTrace();
          }

    }

    //String(String String-literal);
    //Create a String object using the String literal provided in the arguments of the constructor
    {
        String myString = new String("WE ARE A PART OF MATRIX");
        System.out.println("The string created using String(String String-literal) constructor is ~ "+myString);
    }

    //String(char[] characterArray)
    //Create a String object using the characterArray aka The String object is composed of the character present in the characterArray
    {
        char[] characterArray={'W','E',' ','A','R','E',' ','A',' ','P','A','R','T', ' ','M','A','T','R','I','X'};
        String myString = new String(characterArray);
        System.out.println("The string created using String(char characterArray) constructor is ~ "+myString);
    }

    //String(char[] value, int offset, int length)
    //Create a String object using character arry aka content of the string is the character representation of the contents of the character array 
    //starting from the desired index and size.
    //offset is the characters you wanna miss in taking part of creation of String object
    //length is simply no of characters in the string in this case no of character you want to create a String object starting after offset
    {
        char[] characterArray={'W','E',' ','A','R','E',' ','A',' ','P','A','R','T', ' ','M','A','T','R','I','X'};
        int offset = 14;
        int length = 6;
        String myString = new String(characterArray,offset,length);
        System.out.println("The string created using String(char characterArray,int offset,int length) constructor is ~ "+myString);
    }

    //String(int[] codePoints,  int offset,  int length)
    //Create a String object that contains the unicode points of the sub array
    //offset is the characters you wanna miss in taking part of creation of String object
    //length is simply no of characters in the string in this case no of character you want to create a String object starting after offset
    {
        int[] codePoints ={65,66,67,68,69};
        int offset = 2;
        int length = 3;
        String myString = new String(codePoints,offset,length);
        System.out.println("The string created using String(int codePoints,int offset,int length) constructor is ~ "+myString);
    }

    //String buffer and String builder are the predefined classes to create a String we will be discussing them in the later part


}
class Main
{
          public static void main(String[] args)
        {
            myclass ob =new myclass();
        }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


String manipulation ~

There are numbers of things we can do on out string with predefined functions of String class. 

import java.util.*;
import java.nio.charset.Charset;
import java.io.UnsupportedEncodingException;
class myclass
{

//Method ~ charAt(int index)
//Returns ~ char 
//Usecase ~ Retrns character at provided index
{
 String mystring = "WE ARE A PART OF MATRIX";
 int index = 4;
 char returnedCharacter = mystring.charAt(index);
 System.out.println(" ''WE ARE A PART OF MATRIX''.chatAt(" +index+ ") = " + returnedCharacter );
}

//codePointAt(int index)
//Returns ~ integer
//Usecase ~ Returns character's unicodepoint at provided index
{
 String mystring = "WE ARE A PART OF MATRIX";
 int index = 4;
 int returnedInteger = mystring.codePointAt(index);
 System.out.println(" ''WE ARE A PART OF MATRIX''.codePointAt(" +index+ ") = " + returnedInteger );
}

//codePointBefore(int index)
//Returns ~ integer
//Usecase ~ Returns character's unicodepoint present before provided index
{
 String mystring = "WE ARE A PART OF MATRIX";
 int index = 4;
 int returnedInteger = mystring.codePointBefore(index);
 System.out.println(" ''WE ARE A PART OF MATRIX''.codePointBefore(" +index+ ") = " + returnedInteger );
}

//compareTo(String anotherString)
//Returns - integer value of two Strings that are compared lexicographicially
//Usecase -  This method is highly useful in case you want to compare two strings on the basics of alphabetical order
//Less than zero means the string being compared to is smaller more than zero means string being compared to is bigger
////in this method is case sensitive aka If two Strings have same content but different case the String with uppercase will be considered as samaller
{
 String mystring1 = "abcd";
 String mystring2 = "bbcd";
 if(mystring1.compareTo(mystring2) > 0 )
 {
  System.out.println( "''abcdb''.compareTo(''bbcd'') = 1");
 }
 else
 {
  System.out.println(" ''abcdb''.compareTo(''bbcd'') = -1");
 }
}

//concat(String anotherString)
//Returns ~ String
//Usecase ~ This method is used to join two Strings together one after another
{
 String mystring1 = "WE ARE A ";
 String mystring2 = "PART OF MATRIX";
 String returnedString = mystring1.concat(mystring2);
 System.out.println(" ''WE ARE A ''.concat(''PART OF MATRIX'') = "+returnedString);
}

//contains(characterSequencce)
// Returns ~ Boolean
//Usecase ~ This method will return true if the character sequence if found in the String
{
 String mystring = "WE ARE A PART OF MATRIX";
 boolean returnedBoolean = mystring.contains("XMATRI");
 System.out.println(" ''WE ARE A PART OF MATRIX''.contains(''XMATRI'') = "+returnedBoolean);
}

//contentEquals(characterSequence)
//Returns ~ Boolean
//Usecase ~ This method returns true if the character sequence matches the string
{
 String mystring = "WE ARE A PART OF MATRIX";
 boolean returnedBoolean = mystring.contains("WE ARE A PART OF MATRIX");
 System.out.println(" ''WE ARE A PART OF MATRIX''.contentEquals(''WE ARE A PART OF MATRIX'') = "+returnedBoolean);
}

//contentEquals(StringBuffer StringBufferString)
//Returns ~ Boolean
//Usecase ~ This method returns true if the character sequence matches the stringBuffer String
{
 String mystring = "WE ARE A PART OF MATRIX";
 StringBuffer myStringBufferString = new StringBuffer("WE ARE A PART OF MATRIX");
 boolean returnedBoolean = mystring.contentEquals(myStringBufferString);
 System.out.println(" ''WE ARE A PART OF MATRIX''.contentEquals(''WE ARE A PART OF MATRIX'') = "+returnedBoolean);
}

//copyValueOf(char[] characterArray)
//Returns ~ static String
//Usecase ~ This method is used to create String object(staticially) using the character array
{
 char[] characterArray = {'M','A','T','R','I','X'};
 String returnedString = String.copyValueOf(characterArray);
 System.out.println(" String.copyValueOf({'M','A','T','R','I','X'}) = "+returnedString);
}

//copyValueOf(char[] data, int offset, int count)
//Returns static String
//usecase ~ Reurns static String from the array specified 
 {
 char[] characterArray = {'M','A','T','R','I','X'};
 int offset = 2;
 int count = 2;
 String returnedString = String.copyValueOf(characterArray,offset,count);
 System.out.println(" String.copyValueOf({'M','A','T','R','I','X'},2,2) = "+returnedString);
}

//endsWith(String suffix)
//Returns ~ Boolean
//Usecase ~ Returns true if the String ends with given character sequence
{
 String mystring = "WE ARE A PART OF MATRIX";
 String characterSequence = "MATRIX";
 Boolean returnedBoolean = mystring.endsWith(characterSequence);
 System.out.println(" ''WE ARE A PART OF MATRIX''.endsWith(''MATRIX'') = "+returnedBoolean);
}

//equals(String object)
//Returns ~ Boolean
//Usecase ~ This method is used to cherck whetehr a String object is equall to other String object or not.
{
 String mystring = "WE ARE A PART OF MATRIX";
 String mystring1 = new String("WE ARE A PART OF MATRIX");
 String mystring2 = new String("WE ARE A PART OF MATRIX");
 StringBuffer mystring3 = new StringBuffer("WE ARE A PART OF MATRIX");
  boolean returnedBoolean = mystring1.equals(mystring2);
 System.out.println("Same String class object will return true while other not " );
}

//equalsIgnoreCase(String object)
//Returns ~ Boolean
//Usecase ~ This method is used to cherck whetehr a String object is equall to other String object or not ignoring the case sensitivity.
{
 String mystring = "WE ARE A PART OF MATRIX";
 String mystring1 = new String("WE ARE A PART OF MATRIX");
 String mystring2 = new String("we are a part of matrix");
 StringBuffer mystring3 = new StringBuffer("WE ARE A PART OF MATRIX");
 boolean returnedBoolean = mystring1.equalsIgnoreCase(mystring2);
 System.out.println("Same String class object will return true ignoring its case sensitiveness while other not " );
}

//getBytes()
//Returns ~ byte[]
//Usecase ~ This method returns the array version of the Strig but in the byte form using the platform default character set
{
 byte[] byteArray;
 String mystring = "WE ARE A PART OF MATRIX ☕️";
 byteArray = mystring.getBytes();
 System.out.print(" ''WE ARE A PART IF MATRIX''"+".getbytes() = ");
 for(int i=0;i<byteArray.length;i++)
 {
  byte characterInByte = byteArray[i];
  System.out.print(characterInByte+",");
 }
System.out.println(" "); 
}

//getBytes(Charset charset)
//Returns ~ byte[]
//Usecase ~ This method returns array version of the given String but in byte version of the provided characterSet
{
 byte[] byteArray;
 String mystring = "WE ARE A PART OF MATRIX ☕️";
 byteArray = mystring.getBytes(Charset.forName("UTF-8"));
 System.out.print(" ''WE ARE A PART IF MATRIX''"+".getbytes(charset characterSet) = ");
 for(int i=0;i<byteArray.length;i++)
 {
  byte characterInByte = byteArray[i];
  System.out.print(characterInByte+",");
 }
System.out.println(" ");  
}

//getBytes(String charset)
//Returns ~ byte[]
//Usecase ~ This method returns array version of the given String but in byte version of the provided characterSet
{
 try
 {
  byte[] byteArray;
  String mystring = "WE ARE A PART OF MATRIX ☕️";
  byteArray = mystring.getBytes("UTF-8");
  System.out.print(" ''WE ARE A PART IF MATRIX''"+".getbytes(String characterSet) = ");
  for(int i=0;i<byteArray.length;i++)
  {
   byte characterInByte = byteArray[i];
   System.out.print(characterInByte+",");
  }
 }
 catch (UnsupportedEncodingException e)
 {
    e.printStackTrace();
 }
System.out.println(" ");
}

//getChars(int startingIndex,int endingIndex,char[] destination,int start)
//returns char[]
//Usecae ~ This method is used in getting character array version of the string provided but from the indexes specified
{
 String mystring = "WE ARE A PART IF MATRIX";
 int startingIndex = 0;
 int endingIndex = 2;
 char[] destination = new char[endingIndex-startingIndex];
 mystring.getChars(startingIndex,endingIndex,destination,0);
 System.out.print(" ''WE ARE A PART IF MATRIX''.getChars(0,2,destination,0) = ");
 for(int i=0;i<destination.length;i++)
 {
  System.out.print(destination[i]);
 }
System.out.println(" ");
}

//hashCode()
//Return ~ hashCode version of the String
//Usecase ~ This method is useful in many cases like for checking the Strings etc.
{
 String mystring = "WE ARE A PART OF MATRIX";
 int returnedHashCode;
 returnedHashCode = mystring.hashCode();
 System.out.println(" ''WE ARE A PART OF MATRIX''.hashCode() = "+returnedHashCode);
}

//indexOf(char ch)
//Returns ~ int
//Usecase ~ This method returns the first  index of character found in the string
{
 String mystring = "WE ARE A PART OF MATRIX";
 char searchedCharacter = 'A';
 int returnedIndex = mystring.indexOf(searchedCharacter);
 System.out.println(" ''WE ARE A PART IF MATRIX''.indexOf(A) = "+returnedIndex);
}

//indexOf(char ch, int fromIndex)
//Returns ~ int
//Usecase ~ This method returns the index of the character searched after the provided index
{
 String mystring = "WE ARE A PART OF MATRIX";
 char searchedCharacter = 'A';
 int searchedAfter = 4;
 int returnedIndex = mystring.indexOf(searchedCharacter,searchedAfter);
 System.out.println(" ''WE ARE A PART IF MATRIX''.indexOf(A,3) = "+returnedIndex);
}

//indexOf(String characterSequencce)
//Returns ~ int
//Usecase ~ This method returns the first  index of characterSequencce found in the string
{
 String mystring = "WE ARE A PART OF MATRIX";
 String characterSequence = "MATRIX";
 int returnedIndex = mystring.indexOf(characterSequence);
 System.out.println(" ''WE ARE A PART IF MATRIX''.indexOf(''MATRIX'') = "+returnedIndex);
}

//indexOf(String characterSequencce,int startingIndex)
//Returns ~ int
//Usecase ~ This method returns the first  index of characterSequencce found in the string searched from the given index
{
 String mystring = "WE ARE A PART OF MATRIX";
 String characterSequence = "MATRIX";
 int startingIndex = 0 ;
 int returnedIndex = mystring.indexOf(characterSequence,startingIndex);
 System.out.println(" ''WE ARE A PART IF MATRIX''.indexOf(''MATRIX'',0) = "+returnedIndex);
}

//intern()
//Returns ~ String
//Usecase ~ This method returns the string from the pool 
{
 String mystring = "MATRIX";
 String returnedString = mystring.intern();
 System.out.println(" ''MATRIX''.itern(anotherStringVariable) = "+returnedString); 
}

//isEmpty()
//Returns ~ boolean
//Usecase ~ This methods is used to check whether a String is empty or not
{
 String mystring = "WE ARE A PART OF MATRIX";
 boolean returnedBoolean;
 returnedBoolean = mystring.isEmpty();
 System.out.println(" ''WE ARE A PART OF MATRIX''.isEmpty() = "+returnedBoolean);
} 

//lastIndexOf(char character)
//Retrns ~ int 
//Usecase ~ This method returns the last index of the character provided in the String
{
 String mystring = "WE ARE A PART OF MATRIX";
 char searchedCharacter = 'A';
 int returnedIndex = mystring.lastIndexOf(searchedCharacter);
 System.out.println(" ''WE ARE A PART OF MATRIX''.lastIndexOf('A') = "+returnedIndex);
}

//lastIndexOf(char character,int fromIndex)
//Retrns ~ int 
//Usecase ~ This method returns the last index of the character provided in the String searching from backwards
{
 String mystring = "WE ARE A PART OF MATRIX";
 char searchedCharacter = 'A';
 int fromIndex = 4;
 int returnedIndex = mystring.lastIndexOf(searchedCharacter,fromIndex);
 System.out.println(" ''WE ARE A PART OF MATRIX''.lastIndexOf('A',4) = "+returnedIndex);
}

//lastIndexOf(String characterSequence)
//Retrns ~ int 
//Usecase ~ This method returns the last index of the character sequence provided in the String
{
 String mystring = "WE ARE A PART OF MATRIX";
 String characterSequence = "MATRIX";
 int returnedIndex = mystring.lastIndexOf(characterSequence);
 System.out.println(" ''WE ARE A PART OF MATRIX''.lastIndexOf(''MATRIX'') = "+returnedIndex);
}

//lastIndexOf(String characterSequence,int searchedAfter)
//Retrns ~ int 
//Usecase ~ This method returns the last index of the character sequence provided in the String searching after a given string
{
 String mystring = "WE ARE A PART OF MATRIX WE ";
 String characterSequence = "WE";
 int searchedAfter =  3;
 int returnedIndex = mystring.lastIndexOf(characterSequence,searchedAfter);
 System.out.println(" ''WE ARE A PART OF MATRIX WE''.lastIndexOf(''MATRIX'',3) = "+returnedIndex);
}

//length()
//Returns ~ int
//Usecase ~ This method is the most useful method out of all this method is used to get the number of characters 
{
 String mystring = "WE ARE A PART OF MATRIX";
 int length;
 length = mystring.length();
 System.out.println(" ''WE ARE A PART OF MATRIX''.length() = "+length);
}

//matches(String anotherString)
//Returns ~ Boolean
//Usecase ~ This method is used to check whether the content of strings are equall or not 
{
 String mystring = "MATRIX";
 String anotherString = "MATRIX";
 StringBuffer StringBufferString = new StringBuffer("MATRIX");
 boolean returnedBoolean;
 returnedBoolean = mystring.matches(anotherString);
 System.out.println(" ''MATRIX''.matches(''MATRIX'') = "+returnedBoolean);
}

//trim()
//Returns String
//Usecase ~ This method returns the string by removing all the whitespace which appear front and back 
{
 String mystring = "       WE ARE NPCS         ";
 System.out.println(" ''       WE ARE NPCS         ''.trim() = "+mystring.trim()); 
}

//valueOf(boolean b)
//Returns ~ String version of the boolean
//Usecase ~ This method is used to convert boolean into string object
{
 boolean myBoolean = true;
 String booleanString;
 booleanString = String.valueOf(myBoolean);
 System.out.println("String.valueOf(true) = "+booleanString);
}

//valueOf(float f)
//Returns ~ String version of the float
//Usecase ~ This method is used to convert float into string object
{
 float myFloat = 69.69f;
 String floatString;
 floatString = String.valueOf(myFloat);
 System.out.println("String.valueOf(69.69f) = "+floatString);
}

//valueOf(int i)
//Returns ~ String version of the int
//Usecase ~ This method is used to convert int into string object
{
 int myInt = 69;
 String intString;
 intString = String.valueOf(myInt);
 System.out.println("String.valueOf(69) = "+intString);
}

//valueOf(long l)
//Returns ~ String version of the long
//Usecase ~ This method is used to convert long into string object
{
 long myLong = 696969L;
 String longString;
 longString = String.valueOf(myLong);
 System.out.println("String.valueOf(696969L) = "+longString);
}

//valueOf(double d)
//Returns ~ String version of the double
//Usecase ~ This method is used to convert double into string object
{
 double myDouble = 69.69696969;
 String doubleString;
 doubleString = String.valueOf(myDouble);
 System.out.println("String.valueOf(69.69696969) = "+doubleString);
}

//valueOf(char ch)
//Returns ~ String version of the char 
//Usecase ~ This method is used to extract the value of char
{
 char myChar = 'F';
 String characterString;
 characterString = String.valueOf(myChar);
 System.out.println(" String.valueOf('A') = "+characterString);
}

}
class Main
{
 public static void main(String[] args)
 {
  myclass ob =new myclass();
 }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
