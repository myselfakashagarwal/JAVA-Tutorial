
                                                                                                                                     
â–€â–ˆâ–ˆâ–ˆâ–ˆâ–€       â–€â–ˆâ–ˆâ–ˆâ–ˆâ–€   â–€â–ˆâ–ˆâ–ˆâ–„   â–€â–ˆâ–ˆâ–ˆâ–€   â–€â–ˆâ–ˆâ–ˆâ–ˆâ–€ â–€â–ˆâ–ˆâ–ˆâ–€    â–€â–ˆâ–ˆâ–ˆâ–€â–€â–€â–ˆâ–ˆâ–ˆ    â–€â–ˆâ–ˆâ–ˆâ–€â–€â–€â–ˆâ–ˆâ–„               â–€â–ˆâ–ˆâ–ˆâ–ˆâ–€       â–€â–ˆâ–ˆâ–ˆâ–ˆâ–€    â–„â–ˆâ–€â–€â–€â–ˆâ–„â–ˆ   â–ˆâ–ˆâ–ˆâ–€â–€â–ˆâ–ˆâ–€â–€â–ˆâ–ˆâ–ˆ
  â–ˆâ–ˆ           â–ˆâ–ˆ       â–ˆâ–ˆâ–ˆâ–„    â–ˆ       â–ˆâ–ˆ   â–„â–ˆâ–€        â–ˆâ–ˆ    â–€â–ˆ      â–ˆâ–ˆ    â–€â–ˆâ–ˆâ–„               â–ˆâ–ˆ           â–ˆâ–ˆ     â–„â–ˆâ–ˆ    â–€â–ˆ   â–ˆâ–€   â–ˆâ–ˆ   â–€â–ˆ
  â–ˆâ–ˆ           â–ˆâ–ˆ       â–ˆ â–ˆâ–ˆâ–ˆ   â–ˆ       â–ˆâ–ˆ â–„â–ˆâ–€          â–ˆâ–ˆ   â–ˆ        â–ˆâ–ˆ     â–€â–ˆâ–ˆ               â–ˆâ–ˆ           â–ˆâ–ˆ     â–€â–ˆâ–ˆâ–ˆâ–„            â–ˆâ–ˆ     
  â–ˆâ–ˆ           â–ˆâ–ˆ       â–ˆ  â–€â–ˆâ–ˆâ–„ â–ˆ       â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„          â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ        â–ˆâ–ˆ      â–ˆâ–ˆ               â–ˆâ–ˆ           â–ˆâ–ˆ       â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„        â–ˆâ–ˆ     
  â–ˆâ–ˆ     â–„     â–ˆâ–ˆ       â–ˆ   â–€â–ˆâ–ˆâ–„â–ˆ       â–ˆâ–ˆ  â–ˆâ–ˆâ–ˆ         â–ˆâ–ˆ   â–ˆ  â–„     â–ˆâ–ˆ     â–„â–ˆâ–ˆ               â–ˆâ–ˆ     â–„     â–ˆâ–ˆ     â–„     â–€â–ˆâ–ˆ        â–ˆâ–ˆ     
  â–ˆâ–ˆ    â–„â–ˆ     â–ˆâ–ˆ       â–ˆ     â–ˆâ–ˆâ–ˆ       â–ˆâ–ˆ   â–€â–ˆâ–ˆâ–„       â–ˆâ–ˆ     â–„â–ˆ     â–ˆâ–ˆ    â–„â–ˆâ–ˆâ–€               â–ˆâ–ˆ    â–„â–ˆ     â–ˆâ–ˆ     â–ˆâ–ˆ     â–ˆâ–ˆ        â–ˆâ–ˆ     
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–„â–ˆâ–ˆâ–ˆâ–„    â–ˆâ–ˆ     â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–ˆâ–ˆâ–ˆâ–„   â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€               â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–ˆâ–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€       â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   
                                                                                                                                     
                                                                                        

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Intro ~

linked list in my opinion explores the true concepts of the oop. A linked list is composed of nodes every node have two major parts data and reference part 
A node is a non primitive data type i.e data type created by the user. Many nodes connect together with the help of reference part together making a linked 
list, these nodes are stored randomly in the memory thus losing the reference of the first node may result in losing the list. It is a linear dynamic 
data structure 

Linked list have the following advantages ~
1. No boundatinns on size unlike array
2. These are stored in the memory randomly       
3. Its size can be increased during the runtime 

list are of many types ~
1. Singly linked list 
2. Doubly linked list 
3. circular linked list 
4. Doubly circular linked list 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Singly linked list ~

Singly linked list is the most basic linked list's node have two parts data and pointer(note: pointers are not in java this is just a reference).
Node is a non primitive datatype inplemented through class this class have two main datatype categories one regular to hold data like int char etc,
The another is same as class itself thus we can store node inside class making a chain.


The first node of the linked list is caled head 
The reference of the last node always represent null
Nodes can be inserted at any point 
Deleation of the node can be done at any part 
Traverse cannot be done at any part 
Sorting is possible on the basics of data 

These are the main actions that can be performed on the singly linked list ~

add front
add back
add specific
delete front
delete back
delete specific
display

Example of implementation of the linked list from the scratch ~

import java.util.*;
public class mylist
{
    Scanner in =new Scanner(System.in);
    public class bruh
    {
        String name;
        bruh next;
        bruh(String name)
        {
            this.name = name;
            this.next =null;
        }
    }
    bruh head; 
    bruh temporary;
    public void add_front()
    {
        System.out.println("Input the name of the bruh");
        String name = in.nextLine();
        bruh newbruh = new bruh(name);
        if(head==null)
        {
            head = newbruh;
        }
        else
        {
            newbruh.next = head;
            head = newbruh;
        }
    }
    public void add_back()
    {
        System.out.println("Input the name of the bruh");
        String name = in.nextLine();
        bruh newbruh = new bruh(name);
        if(head==null)
        {
            head= newbruh;
        }
        else
        {
           temporary =head;
           while (temporary.next!=null)
           {
               temporary = temporary.next;
           }
           temporary.next = newbruh;
        }
    }
    public void add_specific()
    {
        System.out.println("Input the name of the bruh");
        String name =in.nextLine();
        bruh newbruh =new bruh(name);
        System.out.println("Enter the position you wanna enter that");
        int initial = 1;
        int position1 = in.nextInt();    
        temporary = head;
        while(initial<position1-1)
        {
            temporary=temporary.next;
            initial++;
        }
        newbruh.next= temporary.next;
        temporary.next=newbruh;
    }
    public void delete_front()
    {
        head = head.next;
    }
    public void delete_back()
    {
        temporary = head; 
        while(temporary.next.next!=null)
        {
            temporary =temporary.next;
        }
        temporary.next = null;
    }   
    public void delete_specific()
    {        
        System.out.println("Enter the position you wanna delete");
        int initial = 1;
        int position2 = in.nextInt();
        temporary = head;
        while(initial<position2-1)
        {
            temporary=temporary.next;
            initial++;
        }
        temporary.next=temporary.next.next;
    }
        public void display()
    {
        temporary = head;
        while(temporary!=null)
        {
            System.out.println(temporary.name);
            temporary =temporary.next;
        }
    } 
    class main
    {
        Scanner in =new Scanner(System.in);
        public void main(String []args)
        {
            mylist ob =new mylist();
            ob.add_front();
            add_back();
            add_specific();
            delete_front();
            delete_back();
            delete_specific();
            ob.display();
        }
    }
}


Hope You have understood most of the code by yourself if not dont worry akash is here by your side ðŸ˜‰

Creating a node - We have created a node using the class as in the above program bruh is the class name this bruh have two datatype one is string 
and another is same as class itself. This another datatype is the key to the implementation as it can store the other node and that node can store another 
thus Creating a chain now a question may arise in your mind that how do we initilize its member the thing we have done is we have used a constructor 
this constructor will initilize its string to passed in the argument and next currently at null. 

Every time I create a node I create a instance/physical-entity/object Nowww we have so may objects with data lying randomly in the memory than how do we 
create a chain out it ðŸ¤” simply using using datatype same as object, we will store node inside node and the chain goes on and on. 
As we know in java we can change refernce and store it in a variable we will use temporary node to make two references pointing at the same object 
thus we have secuerity of not losing our node.  

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////