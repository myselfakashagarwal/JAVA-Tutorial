                                                                
      ██                                                        
     ▄██▄                                                       
    ▄█▀██▄       ▀███▄███    ▀███▄███     ▄█▀██▄     ▀██▀   ▀██▀
   ▄█  ▀██         ██▀ ▀▀      ██▀ ▀▀    ██   ██       ██   ▄█  
   ████████        ██          ██         ▄█████        ██ ▄█   
  █▀      ██       ██          ██        ██   ██         ███    
▄███▄   ▄████▄   ▄████▄      ▄████▄      ▀████▀██▄       ▄█     
                                                       ▄█       
                                                     ██▀        


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Intro ~

Array can be described as a datatype which is composed of sequence of homogeneous data stored in a continious memory location. It can be of any length 
of any datatype and can be multidimentional with same datatype  the datatype of an array defines the datatype of all the elements in it. Array provide 
solution to uncountable programming problems which deals with large data-streams . Array are mainly of two types one dimentional and two dimentional.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Single dimentional array ~

The data type of myarray will determine the datatype of all the elements of array. Although an array is declared no physical array exists just like 
class and object (class is a virtual entity while object is a physical entity), thus you may have got an idea that we have to allocate space in the 
memory so we uses new keyword to allocate space. creating an array is a two step process declaration and allocating its memory thus,just like object
arrays are dynamicially allocated.
Till we have not initilized an array all the elements in an array will be initilized to zero. 

Baisc syntax - Declaration and initilization of an single dimentional array ~

Syntax of declaration of single dimentional array virtual entity.
<datatype> <identifier>[];
Example ~
int myarray[];

Syntax of a declaration of single dimentional array physical entity ~
<datatype> <identifier>[] = new <datatype>[size of an array];
Example ~
int myarray[] = new int[10];

Initilization ~ 
The number of items in an array is equal to the size of an array and every item in an array will have a index the no of indexes will equall to the 
" length of array -1 " because index of an array start with zero 

Syntax to initilize element of an array at index x  ~
<arry which is already declared >[index]=<number>;
Example ~
myarray[9]=69;

Initilizing all elements of an array one by one is not an easy task thus loops are used to initilize an array.

Example of declaring and initilizing array using a loop  ~

import java.util.*;
class myarray
{
    Scanner obj =new Scanner(System.in);
    //Creating an array in thye class so that it can be accessed any part of the program 
    int arr[] =new int[10];
    public void input()
    {
        for(int i=0;i<10;i++)
        {
            System.out.println("Input the data at index: "+i);
            arr[i]=obj.nextInt();
        }
    }
    public void display()
    {
         for(int i=0;i<10;i++)
        {
            System.out.println("Element of an array at index: "+i+" is "+arr[i]);
        }
    }
    class Main
    {
        public void main(String args[])
        {
            myarray ob =new myarray();
            ob.input();
            ob.display();
        }
    }
}

The array dynamic inilitization can also be done in this way also ~
int arr[] = {33,44,55,66,77,88,99,420,69,94};

Example of this approach ~

import java.util.*;
class myarray
{
    //Creating an array in thye class so that it can be accessed any part of the program 
    int arr[] = { 33,44,55,66,77,88,99,420,69,94 };
    public void display()
    {
         for(int i=0;i<10;i++)
        {
            System.out.println("Element of an array at index: "+i+" is "+arr[i]);
        }
    }
    class Main
    {
        public void main(String args[])
        {
            myarray ob =new myarray();
            ob.display();
        }
    }
}

In the above case there's no need of new key word for the array this array was initilized using array initilizer it is a list of expressions 
seperated by comma. The array will be created large enough to holds the elements. 


Before moving on to the methods of the array class lets compleate doubble dimentional array 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Doubble dimentional array ~

Doubble dimentional array can be defined as arrays of arrays i.e array is composed of arrays but like single dimentional array all arrays in the array 
are of same data type but they can have same or different size at the same time. Just like above single dimentional array this doubble dimentional array
when declared have not physical entity it came into existance after the memory is allocated or it is initilized using array initilizer. 

Baisc syntax - Declaration and initilization of an doubble dimentional array ~

Syntax of declaration of doubble dimentional array virtual entity.
<datatype> <identifier>[][];
Example ~
int myarray[][];

Syntax of a declaration of single dimentional array physical entity ~
<datatype> <identifier>[][] = new <datatype>[numbers of array][size of each array];
Example ~
int myarray[] = new int[10][10];

Initilization ~ 
The number of array in and doubble dimentioanl array is equal to the number - 1 provided in the first square bracket while size of every array is 
equall to the number provided in the second square bracket in this case also the index starts from zero. Till it is not initilized all arrays are 
initilized to 0 and all elements in arrays are set to zero.

Syntax to initilize element of an array at index x  ~
<arry which is already declared >[array of desired index ][element of dezired index of selected array ]=<number>;
Example ~
myarray[6][9]=69;

In the above example the 69 is assigned to position at 9th index of array at 6th index 

Initilizing all elements of an array and arrays one by one is not an easy task thus loops are used to initilize an array.

Example ~
import java.util.*;
class myddarray
{
    Scanner obj =new Scanner(System.in);
    //Creating an array in thye class so that it can be accessed any part of the program 
    String arr[][] =new String[5][5];
    public void input()
    {
        for(int n_th_array=0;n_th_array<5;n_th_array++)
        {
            System.out.println("The current array is going on is ~ "+n_th_array);
            for(int i=0;i<5;i++)
            {
               arr[n_th_array][i]="("+n_th_array+","+i+")";
            }
        }
    }
    public void display()
    {
        for(int n_th_array=0;n_th_array<5;n_th_array++)
        {
            for(int i=0;i<5;i++)
            {
               System.out.print(arr[n_th_array][i]+"  ");
            }
            System.out.println('\n');
        }
    }
    class Main
    {
        public void main(String args[])
        {
            myddarray ob =new myddarray();
            ob.input();
            ob.display();
        }
    }
}

The output of the following program is ~

(0,0)  (0,1)  (0,2)  (0,3)  (0,4)  

(1,0)  (1,1)  (1,2)  (1,3)  (1,4)  

(2,0)  (2,1)  (2,2)  (2,3)  (2,4)  

(3,0)  (3,1)  (3,2)  (3,3)  (3,4)  

(4,0)  (4,1)  (4,2)  (4,3)  (4,4)  


Just like above doubble dimentional array can also be dynamicially initilized using array initilizer 
Example ~

import java.util.*;
class myarray
{
    Scanner obj =new Scanner(System.in);
    //Creating an array in thye class so that it can be accessed any part of the program 
    String arr[][] = 
    { 
    {"(0,0)","(0,1)","(0,2)","(0,3)","(0,4)"} ,
    {"(1,0)","(1,1)","(1,2)","(1,3)","(1,4)"} ,
    {"(2,0)","(2,1)","(2,2)","(2,3)","(2,4)"} ,
    {"(3,0)","(3,1)","(3,2)","(3,3)","(3,4)"} ,
    {"(4,0)","(4,1)","(4,2)","(4,3)","(4,4)"} ,
    };
    public void display()
    {
        for(int n_th_array=0;n_th_array<5;n_th_array++)
        {
            for(int i=0;i<5;i++)
            {
               System.out.print(arr[n_th_array][i]+"  ");
            }
            System.out.println('\n');
        }
    }
    class Main
    {
        public void main(String args[])
        {
            myarray ob =new myarray();
            ob.display();
        }
    }
}

The output is same as the above approach. 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Dynamic array ~

Arrays are perfect but they have one major drawback that is the length of array are fixed. That is if gets declared and allow=cated memory in the space 
we have to deal with the same length thus it prevent flexibility to overcome this problem dynamic array are used as the word suggests the length of 
dynamic is not fixed it can be changed and modified. It is recommended to see the first method of the array class mentioned below 

This is the approach we can use to implement the dynamic array ~

import java.util.*;
class myarray
{
     int[] myarr =new int[5];
     int current;
     public void add(int data)
     {
         if(current==myarr.length)
         {
             grow();
         }
         myarr[current]=data;
         current++;
     }
     public void grow()
     {
         int[] temporary_arr = new int[myarr.length*2];
         for(int i=0;i<myarr.length;i++)
         {
             temporary_arr[i]=myarr[i];
         }
         myarr = temporary_arr;
     }
     public void display()
     {
      for(int i=0;i<myarr.length;i++)
         {
             System.out.println(myarr[i]);
         }   
     }
     class Main
     {
         Scanner in=new Scanner(System.in);
         public void main(String[] args)
         {
             myarray ob =new myarray();
             System.out.println("input a number");
             int data =in.nextInt();
             ob.add(data);
         }
     }
}


Exaplanation ~ 
In steps we can define this ~
We will add elements and keep track of it at the same time.
If the no of elements will gets equall to the length of array we will modify array.
In the modification of an array we will create an temporary array which is doubble of size of previous one and copy all the elements of previous in 
the new array. 
After the modification gets compleate we will add the new element. 

Just like we discussd earlier array are treated as objects in java thus we can manipulate reference variable to change reference of new array.
The current variable is used to check the count of elements, every time an element gets added the value of current gets increased,  if the current's value
reaches equal to the length it means that we have reached to the end on our array thus before adding the extra element we will modify the array then 
store our element in it. 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


In java array are treated as object thus we can use predefined class methods to made our task more easy lets get handy with them ~
There are nealy a hundred methods which we can use to get our work done.

Method ~
source-array-variable.length;
Usecase ~
This method is used to know length of an array i.e number of elements present in it. This method will be used further explanations for demonstrating 
other methods. For cases implementing dynamic array this method is useful.   
Example ~

import java.util.*;
class myarray
{
    int myarr[] = {69,420,007,94,1945};
    public void display()
    {
            System.out.println(myarr.length);
    }
    class Main
    {
        public void main(String args[])
        {
            myarray ob =new myarray();
            ob.display();
        }
    }
}

The output of the following program is ~
5




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////