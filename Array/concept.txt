                                                                
      ██                                                        
     ▄██▄                                                       
    ▄█▀██▄       ▀███▄███    ▀███▄███     ▄█▀██▄     ▀██▀   ▀██▀
   ▄█  ▀██         ██▀ ▀▀      ██▀ ▀▀    ██   ██       ██   ▄█  
   ████████        ██          ██         ▄█████        ██ ▄█   
  █▀      ██       ██          ██        ██   ██         ███    
▄███▄   ▄████▄   ▄████▄      ▄████▄      ▀████▀██▄       ▄█     
                                                       ▄█       
                                                     ██▀        


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Intro ~

Array can be described as a datatype which is composed of sequence of homogeneous data stored in a continious memory location. It can be of any length 
of any datatype and can be multidimentional with same datatype  the datatype of an array defines the datatype of all the elements in it. Array provide 
solution to uncountable programming problems which deals with large data-streams . Array are mainly of two types one dimentional and two dimentional.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Single dimentional array ~

The data type of myarray will determine the datatype of all the elements of array. Although an array is declared no physical array exists just like 
class and object (class is a virtual entity while object is a physical entity), thus you may have got an idea that we have to allocate space in the 
memory so we uses new keyword to allocate space. creating an array is a two step process declaration and allocating its memory thus,just like object
arrays are dynamicially allocated.
Till we have not initilized an array all the elements in an array will be initilized to zero. 

Baisc syntax - Declaration and initilization of an single dimentional array ~

Syntax of declaration of single dimentional array virtual entity.
<datatype> <identifier>[];
Example ~
int myarray[];

Syntax of a declaration of single dimentional array physical entity ~
<datatype> <identifier>[] = new <datatype>[size of an array];
Example ~
int myarray[] = new int[10];

Initilization ~ 
The number of items in an array is equal to the size of an array and every item in an array will have a index the no of indexes will equall to the 
" length of array -1 " because index of an array start with zero 

Syntax to initilize element of an array at index x  ~
<arry which is already declared >[index]=<number>;
Example ~
myarray[9]=69;

Initilizing all elements of an array one by one is not an easy task thus loops are used to initilize an array.

Example of declaring and initilizing an array ~

import java.util.*;
class myarray
{
    Scanner obj =new Scanner(System.in);
    //Creating an array in thye class so that it can be accessed any part of the program 
    int arr[] =new int[10];
    public void input()
    {
        for(int i=0;i<10;i++)
        {
            System.out.println("Input the data at index: "+i);
            arr[i]=obj.nextInt();
        }
    }
    public void display()
    {
         for(int i=0;i<10;i++)
        {
            System.out.println("Element of an array at index: "+i+" is "+arr[i]);
        }
    }
    class Main
    {
        public void main(String args[])
        {
            myarray ob =new myarray();
            ob.input();
            ob.display();
        }
    }
}

The array dynamic inilitization can also be done in this way also ~
int arr[] = {33,44,55,66,77,88,99,420,69,94};

Example of this approach ~

import java.util.*;
class myarray
{
    //Creating an array in thye class so that it can be accessed any part of the program 
    int arr[] = { 33,44,55,66,77,88,99,420,69,94 };
    public void display()
    {
         for(int i=0;i<10;i++)
        {
            System.out.println("Element of an array at index: "+i+" is "+arr[i]);
        }
    }
    class Main
    {
        public void main(String args[])
        {
            myarray ob =new myarray();
            ob.display();
        }
    }
}

In the above case there's no need of new key word for the array this array was initilized using array initilizer it is a list of expressions 
seperated by comma. The array will be created large enough to holds the elements. 


Before moving on to the methods of the array class lets compleate doubble dimentional array 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Doubble dimentional array ~

Doubble dimentional array can be defined as arrays of arrays i.e array is composed of arrays but like single dimentional array all arrays in the array 
are of same data type but they can have same or different size at the same time. Just like above single dimentional array this doubble dimentional array
when declared have not physical entity it came into existance after the memory is allocated or it is initilized using array initilizer. 

Baisc syntax - Declaration and initilization of an doubble dimentional array ~

Syntax of declaration of doubble dimentional array virtual entity.
<datatype> <identifier>[][];
Example ~
int myarray[][];

Syntax of a declaration of single dimentional array physical entity ~
<datatype> <identifier>[][] = new <datatype>[numbers of array][size of each array];
Example ~
int myarray[] = new int[10][10];

Initilization ~ 
The number of array in and doubble dimentioanl array is equal to the number - 1 provided in the first square bracket while size of every array is 
equall to the number provided in the second square bracket in this case also the index starts from zero. Till it is not initilized all arrays are 
initilized to 0 and all elements in arrays are set to zero.

Syntax to initilize element of an array at index x  ~
<arry which is already declared >[array of desired index ][element of dezired index of selected array ]=<number>;
Example ~
myarray[6][9]=69;

In the above example the 69 is assigned to position at 9th index of array at 6th index 

Initilizing all elements of an array and arrays one by one is not an easy task thus loops are used to initilize an array.






///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////