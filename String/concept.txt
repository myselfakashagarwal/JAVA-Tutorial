                                    â–„â–„                             
 â–„â–ˆâ–€â–€â–€â–ˆâ–„â–ˆ     â–ˆâ–ˆ                    â–ˆâ–ˆ                             
â–„â–ˆâ–ˆ    â–€â–ˆ     â–ˆâ–ˆ                                                   
â–€â–ˆâ–ˆâ–ˆâ–„       â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    â–€â–ˆâ–ˆâ–ˆâ–„â–ˆâ–ˆâ–ˆ    â–€â–ˆâ–ˆâ–ˆ     â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„      â–„â–ˆâ–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
  â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„     â–ˆâ–ˆ        â–ˆâ–ˆâ–€ â–€â–€      â–ˆâ–ˆ       â–ˆâ–ˆ    â–ˆâ–ˆ     â–„â–ˆâ–ˆ  â–ˆâ–ˆ  
â–„     â–€â–ˆâ–ˆ     â–ˆâ–ˆ        â–ˆâ–ˆ          â–ˆâ–ˆ       â–ˆâ–ˆ    â–ˆâ–ˆ     â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€  
â–ˆâ–ˆ     â–ˆâ–ˆ     â–ˆâ–ˆ        â–ˆâ–ˆ          â–ˆâ–ˆ       â–ˆâ–ˆ    â–ˆâ–ˆ     â–ˆâ–ˆ       
â–ˆâ–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€      â–€â–ˆâ–ˆâ–ˆâ–ˆ   â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„      â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–„â–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–„    â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ 
                                                          â–ˆâ–€     â–ˆâ–ˆ
                                                          â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€ 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Intro ~

String - String is basicially a set of characters grouped together 
In other languages like C string is implemented a an array of characters but in Java it is implemented as an object, being an object it comes with lots
of advantages for example compare and conceate etc. It is EG to implement String as it belongs to java's class library. Every String you create is an 
object and any change on it will result in creation of another object of String class because in java string are immutable. For those cases you wanna 
modify the String and dosent wanna create a new instance java provides StringBuffer and StingBuilder both hold String modified after their creation.
Both of these classes are the part of java.lang package they cannnot be modified because they are declared final thus it is impossible to create a
subclass. However a variabele holding the reference of an string object can be changed anytime. For each string literal in your program java 
automaticially craetes a String object.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Implementation ~

In informal it is very easy to implement a string in java program, it is used like as a datatype and it can be used any part wanted in the program.
just like a normal variabele it got a declaration and Implementation part. A String literal is created by putting characters inside doubble quotes.
String mystring;                                                 //declaration
mystring = " We are just the outcome of our surroundings ";      //inilitization

String class in java provide variety of constructors that can be used to initialize members of an string object.



String mystring =new String();
This above constructor call accept no arguments thus it creates an instance of String class aka String with no characters in it.



char character_array[] = {'A','k','a','s','h'};                //Array of character to hold character set
String mystring =new String(character_array);                  
This above constructor call accept the array of character to create a String it have a syntax of String(char character-array[]);



char character_array[] = {'A','k','a','s','h'};                //Array of character to hold character set
String mystring =new String(character_array,0,4);              //passing starting-index and no of character to make a string 
This above constructor call accept the array of character to create a String with starting index and no of character it uses to create a String
it have a syntax of String(char character-array[],int starting-index,int no-of-characters);



We can also create a String which have a character sequence of another String 
String(String string-object);

Lets have a single exampele of this above constructor approach 

import java.util.*;
class myclass
{
char character_array[]= {'A','k','a','s','h'};
Srting mystring = new String(character_array);
String mystring2 = new String(mystring);
System.out.println(mystring2);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


String manipulation ~

There are numbers of things we can do on out string with predefined functions of String class. 

String conceation ~
When you add any data to the string it automaticially converts into string and adds.
For example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes;
        modified_string=modified_string+"Looking for"+6+9;
    }
    public void display()
    {
        System.out.println(modified_string);
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

output of thge following program is ~
0123456789Looking for69

But if we use barckets in addition of the two numbers of the above program it will print tha quoted text with addition performed of the numbers 
For example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        ///modified_string=indexes.substring(3,6);
        //modified_string=indexes.replace("0123","xxxx");
        //modified_string=indexes.concat(" looking for 69 ");
        modified_string=indexes;
        modified_string=modified_string+"Looking for"+(6+9);
    }
    public void display()
    {
        System.out.println(modified_string);
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

output of thge following program is ~
0123456789Looking for15


Function ~
valueOf();
Usecase ~
Returns a String which is in human readable form. 
Example ~
char mychar='a';
String mystring = String.valueOf(mychar);


function ~
length();
Usecase ~
To find the length of the String aka no of character a String is composed of.
Most of the people confuse with index and length Length tells us how many characters does a String is composed of but the index tells us the position 
of the character in the string. The position of a character in a String starts from zero while the length is starts from 1.
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes;
    }
    public void display()
    {
        System.out.println(modified_string.length());
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following program is ~
10 


Function ~
toUpperCase();
Usecase ~
Converts all character in a String to upper case. Non aphabetical and special characters are un affected.
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string="YOUR BRAIN IS NOT MENT FOR MULTI TASKING YOU ARE JUST SWITCHING BETWEEN TASKS AT INSTANCE";
        modified_string=modified_string.toLowerCase();
    }
    public void display()
    {
        System.out.println(modified_string);
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following program is ~
your brain is not ment for multi tasking you are just switching between tasks at instance

Function ~
toLowerCase();
Usecase ~
Converts all character in a String to lower case. Non aphabetical and special characters are un affected.
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string="you are a manipulated";
        modified_string=modified_string.toUpperCase();
    }
    public void display()
    {
        System.out.println(modified_string);
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following progarm is ~
YOU ARE A MANIPULATED


Function ~
concat(String);
Usecase ~
It returns a String with attachment of the given string as parameters. 
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes.concat(" looking for 69 ");
    }
    public void display()
    {
        System.out.println(modified_string);
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following program is ~
0123456789 looking for 69


Function ~
replace(orignal-character/sequence of character,replacement-character/sequence of character);
Usecase ~
This function have two arguments including a character you wanna replace and a character you wnat to replace in plca of it. It returns the String by 
replacing the character. 
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes.replace("0123","xxxx");
    }
    public void display()
    {
        System.out.println(modified_string);
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the folowing program is ~
xxxx456789


Function ~
replaceAll();
Usecase ~
This is a modified version of it which also replaces the sequence of character/character 
Exampple ~
import java.util.*;
class mystring
{
    String mystring1="LAWS ARE MADE TO BE BROKEN";
    String mystring2=new String("US");
    StringBuffer mystring3= new StringBuffer("WE");
    String modified_string="";
    public void modify()
    {
        modified_string = mystring1.replaceAll("LAWS","RULES");
        display();
    }
    public void display()
    {
        System.out.println(modified_string);
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program is ~
RULES ARE MADE TO BE BROKEN





Function ~
substring( integer starting index);
Usecase ~
This method returns the string starting with the desired index thus it have capabilities to eliminate the starting character from front.
Example ~
String mystring ="damm bro";
String answer = mystring.substring(5);
Example of program is ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes.substring(3);
    }
    public void display()
    {
        System.out.println(modified_string);
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The above program outputs ~
3456789
As it is clear it also includes the starting-index provided in the method.

There's a modified varsion of it which includes the ending-index just type the last index in the method along with starting index seperated by a comma. 
However in the modification it does not include the last-index 

for example ~

import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes.substring(3,6);
    }
    public void display()
    {
        System.out.println(modified_string);
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following program is ~
345
As we discussed earlier the last index is not included in the answer/modified-version 


Function ~
indexOf(character/sequencce of character);
Usage ~
This method returns the first index of the character or the given sequence of character this method also have a one more argumnet that is index 
from which the search of the index the method will start searching. 
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes; 
    }
    public void display()
    {
        System.out.println(modified_string.indexOf('7'));
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the progaram is ~
7

lets search a sequence of character ~

import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes;   
    }
    public void display()
    {
        System.out.println(modified_string.indexOf("89"));
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following program ~
8
Because this sequence of character gets start from 8th index 

This method have another argument aka searching index this index will be the starting poinmt from where the seaching of a character would start 

For example ~
import java.util.*;
class mystring
{
    String indexes ="01234567890000089";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes;       
    }
    public void display()
    {
        System.out.println(modified_string.indexOf("89",9));
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the program ~
15 
Because the searching of the sequence of character will start from 9th index 

Function ~
lastIndexOf(character/sequencce-of-character);
Usage ~
This method is used for searching the character or sequence of character from last aka it will return the last index of a character or sequencce of it 
example ~

import java.util.*;
class mystring
{
    String indexes ="01234567890000089";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes;   
    }
    public void display()
    {
        System.out.println(modified_string.lastIndexOf("89"));
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following program ~
15
Becasue this method prints the last index of the given sequence of character/character present in the String 

There's also a argument that makes program return the last index of character/sequence of character after skipping the no of characters from last 
Example ~

import java.util.*;
class mystring
{
    String indexes ="01234567899876543210";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes;
        display();
    }
    public void display()
    {
        System.out.println(modified_string.lastIndexOf("8",9));
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

Output of the above progarm is ~
8
In the normal  case the output with single argument would have come 11 but as I mentioned earlier this second argument can skip the no of character 
in the search of character from back.


Function ~
equals(string-to-checkwith);
Usecase ~
Compares two String returns true or false 
example ~
import java.util.*;
class mystring
{
    String indexes ="SOCIAL MEDIA IS A PART OF MATRIX";
    String indexes2= "social media is a part of simulation";
    String modified_string="";
    public void modify()
    {
        if(indexes.equals(indexes2)){
            System.out.println("Both strings are equall");
        }
        else{
            System.out.println("Both strings are not equall");
        }
        display();
    }
    public void display()
    {
        System.out.println();
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following progarm is ~
Both strings are not equall because they are different in ters of case to counter these kind of situations there's a new method 

Function ~
equalsIgnoreCase();
Usecase ~
This method checks the equality excluding the case-sensitive part 
Example ~
class mystring
{
    String indexes ="SOCIAL MEDIA IS A PART OF MATRIX";
    String indexes2= "social media is a part of simulation";
    String modified_string="";
    public void modify()
    {
        if(indexes.equalsIgnoreCase(indexes2)){
            System.out.println("Both strings are equall");
        }
        else{
            System.out.println("Both strings are not equall");
        }
        display();
    }
    public void display()
    {
        System.out.println();
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program is ~
Both strings are equall


Difference between ~
equals() and  == 
Ans ~
The key difference between both of them is equals() check the characterstics of character inside the string while == check the equality of the 
String objects.
Example ~
import java.util.*;
class mystring
{
    String indexes ="01234567899";
    String indexes2= new String(indexes);
    String modified_string="";
    public void modify()
    {
        if(indexes.equals(indexes2)){
            System.out.println("Checked by equals() method ");
            System.out.println("Both strings are equall");
        }
        else{
            System.out.println("Checked by equals() method ");
            System.out.println("Both strings are not equall");
        }
        if(indexes==indexes2){
            System.out.println("Checked by == operator ");
            System.out.println("Both strings are equall");
        }
        else{
            System.out.println("Checked by == operator ");
            System.out.println("Both strings are not equall");
        }
        display();
    }
    public void display()
    {
        System.out.println();
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program ~
Checked by equals() method 
Both strings are equall
Checked by == operator 
Both strings are not equall


Function ~
conmpareTo(String);
Usecase ~
It is used to check relation between two string like greater , lesser and equall/0 . Is check their relation of grater or lesser and equall in terms 
of dictionary kinda order aka alphabetical. 
Example ~
import java.util.*;
class mystring
{
    String my_string_array[] ={"zzz","def","ghi","tuv","abc","klm","qrs","nop","wxy"};
    public void modify()
    {
        int i;
        int j;
        String exchange="";
        for(i=0;i<my_string_array.length;i++)
        {
           for(j=i+1;j<my_string_array.length;j++)
           { 
             if((my_string_array[i].compareTo(my_string_array[j]))>0)
             {
                 exchange=my_string_array[i];
                 my_string_array[i]=my_string_array[j];
                 my_string_array[j]=exchange;
             }
           }  
        }
        display();
    }
    public void display()
    {
        for(int k=0;k<my_string_array.length;k++)
        {
            System.out.println(my_string_array[k]);
        }
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program is ~
abc
def
ghi
klm
nop
qrs
tuv
wxy
zzz

To avoid the comparison of case-sensitivity compareToIgnoreCase(string) is used other wise it will print the capital letters first 

Function ~
charAt(int index);
Usecase ~
This method is used to get character present at the given index 
Example ~
import java.util.*;
class mystring
{
    String mystring= "If you have no idea how the things work under the hood it means you are just a bot";
    char mycharacter;
    public void modify()
    {
       mycharacter = mystring.charAt(10);
        display();
    }
    public void display()
    {
       System.out.println("The character at index 10 = "+mycharacter);
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program is ~
The character at index 10 = e

Function ~
getChars();
Usecase ~
This function is used to extract the sequence of character from a string, this method have 4 arguments ~ 
First argumennt is the starting index of extracting of sequence of characters
Second argument is the ending index of the extracting source 
Third argument is a array of character in which it will store sequence of character   
Fourth argument is the starting index of substring from which it will start initilizing the index of a character array 
Example ~
import java.util.*;
class mystring
{
    String mystring= "01234567890";
    int starting_index=3;
    int ending_index=8;
    char my_character_array[]=new char[ending_index-starting_index];
    public void modify()
    {
        mystring.getChars(starting_index,ending_index,my_character_array,0);
        display();
    }
    public void display()
    {
        System.out.print("The characters of extracted character array are = ");
        for(int k=0;k<(ending_index-starting_index);k++)
        {
            System.out.print(my_character_array[k]);
        }
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program is ~
The characters of extracted character array are = 34567

Just like substring it does not include character at last index 

Function ~
toCharArray();
Usage ~
To convert all character in a String to a character array.
import java.util.*;
class mystring
{
    String mystring= "01234567890";
    char my_character_array[];
    public void modify()
    {
        my_character_array=mystring.toCharArray();
        display();
    }
    public void display()
    {
        System.out.println("The characters of extracted character array are = ");
        for(int k=0;k<my_character_array.length;k++)
        {
            System.out.println("At position "+k+" = "+my_character_array[k]);
        }
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program ~
The characters of extracted character array are = 
At position 0 = 0
At position 1 = 1
At position 2 = 2
At position 3 = 3
At position 4 = 4
At position 5 = 5
At position 6 = 6
At position 7 = 7
At position 8 = 8
At position 9 = 9
At position 10 = 0

Function 
getBytes();
Usecase ~
This method is gets stores index of character as per as  ascII code indexes for example index of 'A' is 65
Example ~
import java.util.*;
class mystring
{
    String mystring= "01234567890";
    byte my_byte_array[];
    public void modify()
    {
        my_byte_array=mystring.getBytes();
        display();
    }
    public void display()
    {
        System.out.println("The byte value of extracted character array are = ");
        for(int k=0;k<my_byte_array.length;k++)
        {
            System.out.println("At position "+k+" = "+my_byte_array[k]);
        }
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program ~
The byte value of extracted character array are = 
At position 0 = 48
At position 1 = 49
At position 2 = 50
At position 3 = 51
At position 4 = 52
At position 5 = 53
At position 6 = 54
At position 7 = 55
At position 8 = 56
At position 9 = 57
At position 10 = 48


Function ~
startsWith(sequence of character/character);
Usecase ~
This method is used to check whether a String starts with the sequence of characters provided. 
Example ~
import java.util.*;
class mystring
{
    String mystring= "01234567890";
    String modified_string;
    public void modify()
    {
        modified_string=mystring;
        display();
    }
    public void display()
    {
       if(mystring.startsWith("0123")==true)
       {
           System.out.println("The string starts with the provided sequence of characters ");
       }
       else
       {
           System.out.println("The string do not starts with the provided sequence of characters ");
       }
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the given program is ~
The string starts with the provided sequence of characters 


Function ~
endsWith(sequence of character/character);
Usecase ~
This method is used to check whether a String ends with the sequence of characters provided. 
Example ~
import java.util.*;
class mystring
{
    String mystring= "01234567890";
    String modified_string;
    public void modify()
    {
        modified_string=mystring;
        display();
    }
    public void display()
    {
       if(mystring.endsWith("890")==true)
       {
           System.out.println("The string ends with the provided sequence of characters ");
       }
       else
       {
           System.out.println("The string do not ends with the provided sequence of characters ");
       }
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the given program is ~
The string ends with the provided sequence of characters 


Function ~
contains(character sequence);
Usecase ~
This method is used to check whether a string contains a given sequence of character 
Example ~
import java.util.*;
class mystring
{
    String mystring= "01234567890";
    String modified_string;
    public void modify()
    {
        modified_string=mystring;
        display();
    }
    public void display()
    {
        if(modified_string.contains("123"))
        {
             System.out.println("this character sequence is found in the string");
        }
        else
        {
            System.out.println("this character sequence is not found in the string");
        }
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program is ~
this character sequence is found in the string


Function ~
join(string,n of Strings) 
Usecase ~
This method will return  mystring added to all the other strings right to it.
Example ~
import java.util.*;
class mystring
{
    String mystring=" attachment ";
    String modified_string="";
    public void modify()
    {
        modified_string=String.join(mystring," 1 "," 2 "," 3 "," 4 ");
        display();
    }
    public void display()
    {
        System.out.println(modified_string);
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program is ~
 1  attachment  2  attachment  3  attachment  4

 
Function ~
isEmpty() 
Usecase ~
This method is used to check whether a string is empty or not.
Example ~
import java.util.*;
class mystring
{
    String mystring=" attachment ";
    String modified_string="";
    public void modify()
    {
        modified_string=String.join(mystring," 1 "," 2 "," 3 "," 4 ");
        display();
    }
    public void display()
    {
        System.out.println(modified_string.isEmpty());
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the program is ~
false 

Function ~
intern();
Usecase ~
Java have a concept of String constant pool this pool lies in the heap memory it contains unique Strings in order to put string in the pool we have to 
call intern() method before creating a string in the SCP jvm check whether the string is already present in the string or not if its present the 
reference of that string object is returned. 
Example ~
import java.util.*;
class mystring
{
    String mystring1="WE";
    String mystring2=new String("WE");
    String mystring3=mystring1.intern();
    String mystring4="WE";
    public void modify()
    {
        display();
    }
    public void display()
    {
        System.out.println(mystring1==mystring2);
        System.out.println(mystring1==mystring3);
        System.out.println(mystring4==mystring1);
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the program is ~
false
true
true

In the first case the answer was false because s1 and s2 are two diffrenet object as they are created using different constructor 
In the second case the answer was true as although the objects were diffrenet but thier reference is same just like in the third case both string 
are implemented using the same way. 


Function ~
contentEquals()
Usecase ~
This method is used to check equality with content of immutable and non immutable strings 
Example ~
import java.util.*;
class mystring
{
    String mystring1="WE";
    String mystring2=new String("US");
    StringBuffer mystring3= new StringBuffer("WE");
    public void modify()
    {
        display();
    }
    public void display()
    {
        System.out.println(mystring1.contentEquals(mystring2));
        System.out.println(mystring1.contentEquals(mystring3));
    }
    class Main
    {
        public void main(String[] args)
        {
            mystring ob =new mystring();
            ob.modify();
        }
    }
}

The output of the following program is ~
false
true



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////