                                    â–„â–„                             
 â–„â–ˆâ–€â–€â–€â–ˆâ–„â–ˆ     â–ˆâ–ˆ                    â–ˆâ–ˆ                             
â–„â–ˆâ–ˆ    â–€â–ˆ     â–ˆâ–ˆ                                                   
â–€â–ˆâ–ˆâ–ˆâ–„       â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    â–€â–ˆâ–ˆâ–ˆâ–„â–ˆâ–ˆâ–ˆ    â–€â–ˆâ–ˆâ–ˆ     â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„      â–„â–ˆâ–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
  â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„     â–ˆâ–ˆ        â–ˆâ–ˆâ–€ â–€â–€      â–ˆâ–ˆ       â–ˆâ–ˆ    â–ˆâ–ˆ     â–„â–ˆâ–ˆ  â–ˆâ–ˆ  
â–„     â–€â–ˆâ–ˆ     â–ˆâ–ˆ        â–ˆâ–ˆ          â–ˆâ–ˆ       â–ˆâ–ˆ    â–ˆâ–ˆ     â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€  
â–ˆâ–ˆ     â–ˆâ–ˆ     â–ˆâ–ˆ        â–ˆâ–ˆ          â–ˆâ–ˆ       â–ˆâ–ˆ    â–ˆâ–ˆ     â–ˆâ–ˆ       
â–ˆâ–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€      â–€â–ˆâ–ˆâ–ˆâ–ˆ   â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„      â–„â–ˆâ–ˆâ–ˆâ–ˆâ–„   â–„â–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–„    â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ 
                                                          â–ˆâ–€     â–ˆâ–ˆ
                                                          â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€ 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Intro ~

String - String is basicially a set of characters grouped together 
In other languages like C string is implemented a an array of characters but in Java it is implemented as an object, being an object it comes with lots
of advantages for example compare and conceate etc. It is EG to implement String as it belongs to java's class library. Every String you create is an 
object and any change on it will result in creation of another object of String class because in java string are immutable. For those cases you wanna 
modify the String and dosent wanna create a new instance java provides StringBuffer and StingBuilder both hold String modified after their creation.
Both of these classes are the part of java.lang package they cannnot be modified because they are declared final thus it is impossible to create a
subclass. However a variabele holding the reference of an string object can be changed anytime. For each string literal in your program java 
automaticially craetes a String object.


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Implementation ~

In informal it is very easy to implement a string in java program, it is used like as a datatype and it can be used any part wanted in the program.
just like a normal variabele it got a declaration and Implementation part. A String literal is created by putting characters inside doubble quotes.
String mystring;                                                 //declaration
mystring = " We are just the outcome of our surroundings ";      //inilitization

String class in java provide variety of constructors that can be used to initialize members of an string object.



String mystring =new String();
This above constructor call accept no arguments thus it creates an instance of String class aka String with no characters in it.



char character_array[] = {'A','k','a','s','h'};                //Array of character to hold character set
String mystring =new String(character_array);                  
This above constructor call accept the array of character to create a String it have a syntax of String(char character-array[]);



char character_array[] = {'A','k','a','s','h'};                //Array of character to hold character set
String mystring =new String(character_array,0,4);              //passing starting-index and no of character to make a string 
This above constructor call accept the array of character to create a String with starting index and no of character it uses to create a String
it have a syntax of String(char character-array[],int starting-index,int no-of-characters);



We can also create a String which have a character sequence of another String 
String(String string-object);

Lets have a single exampele of this above constructor approach 

import java.util.*;
class myclass
{
char character_array[]= {'A','k','a','s','h'};
Srting mystring = new String(character_array);
String mystring2 = new String(mystring);
System.out.println(mystring2);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


String manipulation ~

There are numbers of things we can do on out string with predefined functions of String class. 

String conceation ~
When you add any data to the string it automaticially converts into string and adds.
For example ~
String mystring = "Girls that have crush on me :"+6+9;
System.out.println(mystring);

output of thge following program is ~
Girls that have crush on me :69

But if we use barckets in addition of the two numbers of the above program it will print tha quoted text with addition performed of the numbers 
For example ~
String mystring = "Girls that have crush on me :"+(6+9);
System.out.println(mystring);

output of thge following program is ~
Girls that have crush on me :15



Function ~
valueOf();
Usecase ~
Returns a String which is in human readable form. 
Example ~
char mychar='a';
String mystring = String.valueOf(mychar);


function ~
length();
Usecase ~
To find the length of the String aka no of character a String is composed of.
Most of the people confuse with index and length Length tells us how many characters does a String is composed of but the index tells us the position 
of the character in the string. The position of a character in a String starts from zero while the length is starts from 1.
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes;
    }
    public void display()
    {
        System.out.println(modified_string.length());
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following program is ~
10 


Function ~
toUpperCase();
Usecase ~
Converts all character in a String to upper case. Non aphabetical and special characters are un affected.
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string="YOUR BRAIN IS NOT MENT FOR MULTI TASKING YOU ARE JUST SWITCHING BETWEEN TASKS AT INSTANCE";
        modified_string=modified_string.toLowerCase();
    }
    public void display()
    {
        System.out.println(modified_string);
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following program is ~
your brain is not ment for multi tasking you are just switching between tasks at instance

Function ~
toLowerCase();
Usecase ~
Converts all character in a String to lower case. Non aphabetical and special characters are un affected.
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string="you are a manipulated";
        modified_string=modified_string.toUpperCase();
    }
    public void display()
    {
        System.out.println(modified_string);
        
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following progarm is ~
YOU ARE A MANIPULATED


Function ~
concat(String);
Usecase ~
It returns a String with attachment of the given string as parameters. 
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes.concat(" looking for 69 ");
    }
    public void display()
    {
        System.out.println(modified_string);
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following program is ~
0123456789 looking for 69


Function ~
replace(orignal-character/sequence of character,replacement-character/sequence of character);
Usecase ~
This function have two arguments including a character you wanna replace and a character you wnat to replace in plca of it. It returns the String by 
replacing the character. 
Example ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes.replace("0123","xxxx");
    }
    public void display()
    {
        System.out.println(modified_string);
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the folowing program is ~
 xxxx456789


Function ~
substring( integer starting index);
Usecase ~
This method returns the string starting with the desired index thus it have capabilities to eliminate the starting character from front.
Example ~
String mystring ="damm bro";
String answer = mystring.substring(5);
Example of program is ~
import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes.substring(3);
    }
    public void display()
    {
        System.out.println(modified_string);
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The above program outputs ~
3456789
As it is clear it also includes the starting-index provided in the method.

There's a modified varsion of it which includes the ending-index just type the last index in the method along with starting index seperated by a comma. 
However in the modification it does not include the last-index 

for example ~

import java.util.*;
class mystring
{
    String indexes ="0123456789";
    String modified_string="";
    public void modify()
    {
        modified_string=indexes.substring(3,6);
    }
    public void display()
    {
        System.out.println(modified_string);
    }
    class Main
    {
        public void main()
        {
            mystring ob =new mystring();
            ob.display();
        }
    }
}

The output of the following program is ~
345
As we discussed earlier the last index is not included in the answer/modified-version 






///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////