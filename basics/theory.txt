Welcome to the world of java 
Java was developed by james gosling at sun micro system but later sold it out to oracle 😂
java is object oriented and roubust it is complex but easy to under stand as per as my view of point 😂

before going deep into java lets take a small talk 

Program is composed of code and data 
There are two paradigrams in programing ie porcess oriented and object oriented 
process oriented is like code acting on data process oriented is decent when we have small program.
When the program gets large the process oriented approach is hard , Thus difficult to manage the program 
to overcome this pop problems oop was born object orient is like data acting on code.
using oop we can have manyt benefits like scalibility reuseability and easy to manage complexity 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

oop have 4 principles 

Abstraction 
Encapsulation 
Inherritance 
Polymorphism 


Abstraction 
We manage complexity with the help of Abstraction, 
Abstractionis implemented with the help of hierachial classification

Encapsulation
Encapsulationis the mechanism which is used to bind code and data it manipulates .
It provides secuerity 
One of the best example of Encapsulation is class (all data and code resides within the class) 

Inherritance
Inherritancecan be defined as methedology according to which a object acquires the properties of other object
Inherritance supports the concept of hierachial classification

Polymorphism
Polymorphism can be defined as using a item more than once aka reuseability of code 
A promient example of Polymorphism is interface 

Enough Small talk lets talk about java 😂 ☕️ 



🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

must do in java before opening the gates of the hell 😂

All java files are saved with extension of (.java) because in java source file is ofiicially a compilation unit 
In java class name must be same as file name this is because in java all code resides within the class  

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

How java code is compiled 

javac=java compiler
jdk=java development kit
jvm=java virtual machine 
jre=java runtime environment

javac creates a file whose name is same as class but with extension of (.class) this file contains the byte code
of the progarm this byte code is a intermediate representation of instruction that your jvm will execute 

When Java source code is compiled, each individual class is put into its own output file named after the class 
and using the .class extension. 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Java is a collection of whitespace identifiers literals comments opreators seperators and keywords and emotions

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

whitespace = ' '

Java is a free-form language. This means that you do not need to follow any special indentation rules.For instance,
the  program could have been written all on one line or in any other strange way you felt like typing it,
as long as there was at least one whitespace character between each token that was not already delineated by an
operator or separator.In Java, whitespace is a space, tab, or newline.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

comments = comments are elements in java which are ignored by compiler 

there are three types of comments 
// for single line 
/* ...*/ for multiline 
/**
  *
  */  for documentation 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

keywords = keywords can be defined as special words in java that depecites a special meaning to compiler
In addition to keywords java reserves the following words true false and null 

keywords are 

----------------------------------------------------------------------------------------------------------------------
|                                                                                                                    |
|  abstract continue for new switch assert default goto package synchronized boolean do if private this break double |
|  implements protected throw byte else import public throws case enum instanceof return transient catch extends int |
|  short try char final interface static void class finally long strictfp volatile const float native super while    |
|                                                                                                                    |
----------------------------------------------------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Seperators = They are used to terminate a statement or to sperate a block of code 

semicolon ; - is the most used seperator and is used to termainate a statement
parentheses () - is used in multiple cases including defining a precedence of an expression control statements and loops
curly braces {} - are used to define local scope and define block of code they are also used to inilitize an arrray 
barckets [] -these are used to define arrya types and array size 
comma , - commas are used in many cases including using as seperators in for loops and in declaring multiple variables of 
same datatype 
period . - Used to separate package names from subpackages and classes. Also used to separate a variable or method
from a reference variable. 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

identifiers = indentifiers can be defined as name given to memory location these are thought by user 
examples of identifiers are myvariable, myconsttant, myarray or any thing user wishes to name but
they must not begin with a number because it may confuse compiler either it is variable or value and it must also must not 
have /  and - inbetween character

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

literals= literals are const values stored in variables 
example 69 , 420 , 94 ,007 , 'a' ,"mystringx" and many more 😂

Let's have a deep dive into them 💡 Before going to start about literals have have a small talk about number system 

There are mainly  kinds of number system 

---------------------------------------------------------------------------
|                                                                         |
|  NumberSystem      base           Composition                           |
|                                                                         |
|  binary             2              1,2                                  |
|  octal              8              0,1,2,3,4,5,6,7                      |
|  decimal           10              0,1,2,3,4,5,6,7,8,9                  |
|  hexadecimal       16              0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f      |
|                                                                         |
---------------------------------------------------------------------------

In the above table the base show how many type of character a number system is composed of, and the Composition tells
about types of character it have 

Let's move back to literals 

Integer literals 
Any whole number value is an integer literal 
An integer literal can always be assigned to a long variable. However, to specify a long literal, you will need to 
explicitly tell the compiler that the literal value is of type long. You do this by appending an upper- or lowercase
L to the literal. For example, 0x7ffffffffffffffL or 9223372036854775807L is the largest long. An integer can also 
be assigned to a char as long as it is within range.

Floating point literals 
Floating-point literals in Java default to double precision. To specify a float literal, you must append 
an F or f to the constant. You can also explicitly specify a double literal by appending a D or d. Doing so is,
of course, redundant. The default double type consumes 64 bits of storage, while the less-accurate float type
requires only 32 bits.

Boolean literals
Boolean literals are simple. There are only two logical values that a boolean value can have, true and false. 
The values of true and false do not convert into any numerical representation. The true literal in Java does not equal 1,
nor does the false literal equal 0. In Java, they can only be assigned to variables declared as boolean, or used in 
expressions with Boolean operators.

Character literal
Characters in Java are indices into the Unicode character set. They are 16-bit values that can be converted into integers
and manipulated with the integer operators, such as the addition and subtraction operators. A literal character is 
represented inside a pair of single quotes. All of the visible ASCII characters can be directly entered inside the quotes,
such as ‘a’, ‘z’, and ‘@’.

String literals
String literals in Java are specified like they are in most other languages—by enclosing a sequence of characters between
a pair of double quotes.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


.                                              🥶 DATA TYPES 🥶

Java’s safety and robustness comes from this fact. Let’s see what this means. First, every variable has a type,
every expression has a type, and every type is strictly defined. Second, all assignments,
whether explicit or via parameter passing in method calls, are checked for type compatibility.

Java's datatypes are mainly divided into 2 parts ~
1.Primitive      -    these are predefined in java   these are also called as simple datatype
2.Non Primitive  -    these are defined by users 

predefined datatypes are further defined into four groups which are ~
1.a-integers
2.b-floating point
3.c-character
4.d-boolean 

lets' have a deep dive into them 🫠

1.a Integers 

They are used to store numbers aka numbers except decimal/fraction type values In java they all are signed
Integers are divided into four groups namely ~

-------------------------------------------------------------------------------------
|  Name   Width(in bits)   range                                                    |
|                                                                                   |
|  byte      8             -128 to 127                                              |
|  short    16             -32768 to 32767                                          |
|  int      32             -2,147,483,648 to 2,147,483,647                          |
|  long     64             -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807  |
|                                                                                   |
-------------------------------------------------------------------------------------

1.b Floating point 

They are also known as real numbers. Sometimes evaluating expression we need point precise values 
To counter this problem Float and Double are born 

-------------------------------------------------------------------------------------
|  Name   Width(in bits)     range                                                  |
|                                                                                   |
|  float    32               1.4e–045 to 3.4e+038                                   |
|  double   64               4.9e–324 to 1.8e+308                                   |
|                                                                                   |
-------------------------------------------------------------------------------------

1.c Characters 

Java uses unicode to represent Characters unicode defines character set of all international languages 
The standard set of Characters known as ASCII has 0 to 127 character 
Extended characterset of ISO-Latin-1 ranges from 0 to 255

-------------------------------------------------------------------------------------
|  Name   Width(in bits)     range                                                  |
|                                                                                   |
|  char    16               0 to 65535                                              |
|                                                                                   |
-------------------------------------------------------------------------------------

1.d Boolean 

Boolean is for logical values it can only have two possible outcomes either true or false. 
The number of bytes in a boolean is a measure of its logical value. Its size is not defined in java it depends on compiler

-------------------------------------------------------------------------------------
|  Name   Width(in bits)     range                                                  |
|                                                                                   |
|  boolean    no fixed        not fixed, can only store true and false              |
|                                                                                   |
-------------------------------------------------------------------------------------

Non Primitive data type are datatypes which are defined by the user 

String and arrays - we will cover this after some essential topics are covered 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

.                                                🥶 variables 🥶


A variable is the basic storage unit in java program it have a type(datatype) identifier and an optional initilization
All variables have a scope and their lifeline (identifier is the name of the variable) 
let's take an example by declaring a variable 
int myvariable;  //declaring a variable 
myvariable=69;   //initilization of my variable 
here ~ int is the datatype and myvariable is an identifier and 69 is an integer literal or the value initilized to myvariable
the value of 69 is assigned by an operator we will discuss about operators after that 😉
we can declare multiple variables of same datatype at same time 
for example 
int a,b,c,d,e;
in the above expression these all variables are separated by an seperator that we have talked about earlier
we can also declare and initilize a variable at the same time this in terms of java is called Dynamic initilization
example of Dynamic inilitization ~
int myvariable=69;

Let's talk about life and scope of variables 
All variables defined within the class can be access by all the functions within the class these are also called as 
member variables 
A variable defined within the scope(block of code inside curly braces) cannot be accessiable outside the scope 
because variables defined within the scope are destroyed the their scope is left 

Type casting and type conversion 
When we transfer value of one datatype to another datatype there is either the loss of data or there's no lost of data
if the transfer of value or copying of value is in same datatype that's does not have a problem 

In type conversion value of datatype is automaticially to another datatype by compiler But in type conversion value of 
conversion of one datatype must be smaller than other datatype for example
int a=10;
float b;
b=a;

Type casting aka narrowing conversion 
Type casting can be defined as storing a value of datatype with more range to a datatype with less range or (incompatiable)

to peform type casting must follow this 👇🏼
(target-datatype) current-datatype
float x;
int y;
y=(int)x;

Automatic type conversion ~ aka widening conversion
Java supports automatic type conversion, it happens only if ~
Two types are compatiable 
Destination type is larger than source type 

Automatic type promotion 
Java supports automatic type promotion in expression aka in an expression with multiple datatypes the result will automaticially
will be converted to datatype with higher range 




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

.                                            🥶 OPERANDS 🥶

Well well well ... you have survived till now ,😂 now lets give you a more java concept 

operators are used to perform task on perands aka performs operations 
operators can be divided into major 4 types 
Uranary   performs tasks on single operand 
Binary    performs task of two operands
Trernary  performs task on more than two operands 

Uranary operands are divided into two types ~
decrement(--)  decrease value of operand by 1 at a time 
Increment(++)  increase value of operand by 1 at a time



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Sample java program 🧠

import java.util.*;
class myclass
{
  public static void main(String[] args)                                             @java main method
  {
   System.out.println("be water my friend ");                                        @code to print a statement
  }             
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Have a  closer look at java's main method 

All program begins by calling the main method the main method is called when the program gets started. Main()
 is basicially a starting point of your program 
you have often written this  👉🏽public static void main(String[] args)
This line have a meaning yeh it does have a meaning, f*** off java stereotypes 
public - it is a access specifier the main method is delcared as public as it is called outside the class 
static -the static is a keyword which calls main without creating a particular instance of a class 
void - main method is defined as void since it does not return any value 
String[] args- thre's a one parameter for the main method String[] args this is a array of insatances of class string
All code inside main method begins with open curly braces { and ends with closing curly braces }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

System class , output stream , input stream  

Ass 😂 you can read the above program you will find that the line that outputs 'be water my friend' have multiple 
words chained before it. All of these words have a meaning 👇🏼
System- System is a predefined class which provides access to  System 
(💡note S is in capital case in System this is because java is case sensitive)
out,in are used to get access to input output streams 
println(..)-println is a mehod which is used to console the the things inside it (in above example it was a string )

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////










